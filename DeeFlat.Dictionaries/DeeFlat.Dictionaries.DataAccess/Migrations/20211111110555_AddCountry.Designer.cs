// <auto-generated />
using System;
using DeeFlat.Dictionaries.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DeeFlat.Dictionaries.DataAccess.Migrations
{
    [DbContext(typeof(DeeFlatDictDbContext))]
    [Migration("20211111110555_AddCountry")]
    partial class AddCountry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DeeFlat.Dictionaries.Core.Domain.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da1721b8-0cf8-4098-8e07-bed7b587a88a"),
                            CountryId = new Guid("764b2818-cf87-4823-86ec-50aace252e57"),
                            Created = new DateTime(2021, 11, 11, 17, 5, 55, 452, DateTimeKind.Local).AddTicks(3523),
                            IsDeleted = false,
                            Name = "Москва"
                        },
                        new
                        {
                            Id = new Guid("956efb42-ccb1-459f-a9a2-6981f5410c94"),
                            CountryId = new Guid("764b2818-cf87-4823-86ec-50aace252e57"),
                            Created = new DateTime(2021, 11, 11, 17, 5, 55, 452, DateTimeKind.Local).AddTicks(4064),
                            IsDeleted = false,
                            Name = "Санкт-Петербург"
                        },
                        new
                        {
                            Id = new Guid("2dbdc4fe-bdcf-4b41-88c6-b88a503aa5a8"),
                            CountryId = new Guid("764b2818-cf87-4823-86ec-50aace252e57"),
                            Created = new DateTime(2021, 11, 11, 17, 5, 55, 452, DateTimeKind.Local).AddTicks(4073),
                            IsDeleted = false,
                            Name = "Волгоград"
                        },
                        new
                        {
                            Id = new Guid("424f9307-8c17-4bc1-87b2-5629c2044a7a"),
                            CountryId = new Guid("5df84f5b-5247-4a92-a714-d32cf2681664"),
                            Created = new DateTime(2021, 11, 11, 17, 5, 55, 452, DateTimeKind.Local).AddTicks(4074),
                            IsDeleted = false,
                            Name = "Алматы"
                        },
                        new
                        {
                            Id = new Guid("4669f20c-1bbe-41dd-b7d5-ebfbc6bdb97c"),
                            CountryId = new Guid("5df84f5b-5247-4a92-a714-d32cf2681664"),
                            Created = new DateTime(2021, 11, 11, 17, 5, 55, 452, DateTimeKind.Local).AddTicks(4076),
                            IsDeleted = false,
                            Name = "Караганда"
                        },
                        new
                        {
                            Id = new Guid("6a1f5baa-ae40-474a-a0f8-975e8eecc650"),
                            CountryId = new Guid("5df84f5b-5247-4a92-a714-d32cf2681664"),
                            Created = new DateTime(2021, 11, 11, 17, 5, 55, 452, DateTimeKind.Local).AddTicks(4082),
                            IsDeleted = false,
                            Name = "Астана"
                        },
                        new
                        {
                            Id = new Guid("fda27f30-7e52-4750-abcc-0dd919798918"),
                            CountryId = new Guid("f77584e5-6ddc-4a6e-b856-42d240754054"),
                            Created = new DateTime(2021, 11, 11, 17, 5, 55, 452, DateTimeKind.Local).AddTicks(4084),
                            IsDeleted = false,
                            Name = "Киев"
                        },
                        new
                        {
                            Id = new Guid("859d0c88-c2b9-48d0-857a-80deb6a5e94f"),
                            CountryId = new Guid("f77584e5-6ddc-4a6e-b856-42d240754054"),
                            Created = new DateTime(2021, 11, 11, 17, 5, 55, 452, DateTimeKind.Local).AddTicks(4086),
                            IsDeleted = false,
                            Name = "Днепр"
                        },
                        new
                        {
                            Id = new Guid("385b1ff3-2dc4-4fb8-907d-172a63292975"),
                            CountryId = new Guid("f77584e5-6ddc-4a6e-b856-42d240754054"),
                            Created = new DateTime(2021, 11, 11, 17, 5, 55, 452, DateTimeKind.Local).AddTicks(4130),
                            IsDeleted = false,
                            Name = "Одесса"
                        });
                });

            modelBuilder.Entity("DeeFlat.Dictionaries.Core.Domain.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = new Guid("764b2818-cf87-4823-86ec-50aace252e57"),
                            Created = new DateTime(2021, 11, 11, 17, 5, 55, 451, DateTimeKind.Local).AddTicks(976),
                            IsDeleted = false,
                            Name = "Россия"
                        },
                        new
                        {
                            Id = new Guid("5df84f5b-5247-4a92-a714-d32cf2681664"),
                            Created = new DateTime(2021, 11, 11, 17, 5, 55, 452, DateTimeKind.Local).AddTicks(3246),
                            IsDeleted = false,
                            Name = "Казахстан"
                        },
                        new
                        {
                            Id = new Guid("f77584e5-6ddc-4a6e-b856-42d240754054"),
                            Created = new DateTime(2021, 11, 11, 17, 5, 55, 452, DateTimeKind.Local).AddTicks(3266),
                            IsDeleted = false,
                            Name = "Украина"
                        });
                });

            modelBuilder.Entity("DeeFlat.Dictionaries.Core.Domain.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("DeeFlat.Dictionaries.Core.Domain.City", b =>
                {
                    b.HasOne("DeeFlat.Dictionaries.Core.Domain.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DeeFlat.Dictionaries.Core.Domain.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
