// <auto-generated />
using System;
using DeeFlat.Dictionaries.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DeeFlat.Groups.DataAccess.Migrations
{
    [DbContext(typeof(DeeFlatGroupDbContext))]
    [Migration("20211104092347_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DeeFlat.Core.Domain.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GroupStatusId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupStatusId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DeeFlat.Core.Domain.GroupStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GroupStatuses");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2021, 11, 4, 15, 23, 47, 228, DateTimeKind.Local).AddTicks(8888),
                            IsDeleted = false,
                            Name = "Завершено"
                        },
                        new
                        {
                            Id = 0,
                            Created = new DateTime(2021, 11, 4, 15, 23, 47, 228, DateTimeKind.Local).AddTicks(8907),
                            IsDeleted = false,
                            Name = "Комплектация группы"
                        },
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2021, 11, 4, 15, 23, 47, 228, DateTimeKind.Local).AddTicks(8909),
                            IsDeleted = false,
                            Name = "Группа укомплектована"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2021, 11, 4, 15, 23, 47, 228, DateTimeKind.Local).AddTicks(8910),
                            IsDeleted = false,
                            Name = "В процессе обучения"
                        });
                });

            modelBuilder.Entity("DeeFlat.Core.Domain.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("DeeFlat.Core.Domain.UserMark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid>("CourseActivityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Mark")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("UserMarks");
                });

            modelBuilder.Entity("DeeFlat.Core.Domain.Group", b =>
                {
                    b.HasOne("DeeFlat.Core.Domain.GroupStatus", "GroupStatus")
                        .WithMany()
                        .HasForeignKey("GroupStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupStatus");
                });

            modelBuilder.Entity("DeeFlat.Core.Domain.UserGroup", b =>
                {
                    b.HasOne("DeeFlat.Core.Domain.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DeeFlat.Core.Domain.UserMark", b =>
                {
                    b.HasOne("DeeFlat.Core.Domain.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserGroup");
                });
#pragma warning restore 612, 618
        }
    }
}
